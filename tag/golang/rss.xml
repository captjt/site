<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>jt.codes</title>
   
   <link>http://jt.codes/</link>
   <description>My development story begins here.</description>
   <language>en-uk</language>
   <managingEditor> Jordan Taylor</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Hacking Kubernetes</title>
	  <link>//Hacking-Kubernetes</link>
	  <author>Jordan Taylor</author>
	  <pubDate>2017-08-12T05:00:00+00:00</pubDate>
	  <guid>//Hacking-Kubernetes</guid>
	  <description><![CDATA[
	     <h2 id="what-is-kubernetes">What is Kubernetes?</h2>

<p>Most people in tech have at least heard of Kubernetes. If you haven’t here’s an excerpt from <a href="https://kubernetes.io/">Kubernetes.io</a> – <em>“Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications”</em>.</p>

<p>To understand what this article is about you’ll need to know what <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/">Kubernetes objects</a> are.</p>

<h2 id="why-hack-against-k8s">Why Hack Against k8s?</h2>

<p>The biggest reason for hacking against the Kubernetes’ API is purely for custom automated actions to build on top of the already automated infrastructure it provides.</p>

<p>I wanted to build a manager that can create/delete/update deployments and services within a specific namespace in Kubernetes. You can think of a web service that run a very small portion of what <code class="highlighter-rouge">kubectl</code> does.</p>

<p><em>Note: There are <strong>so</strong> many things you can do with Kubernetes’ API – what I am going to walk through is only scratching the surface. These code excerpts are also implemented in Go and import the <a href="https://github.com/kubernetes/client-go">client-go</a> library.</em></p>

<h2 id="the-controller">The Controller</h2>

<p>I decided my Kubernetes <em>Manager</em> needed to implement 3 basic methods to receive, update and delete deployments/services in Kubernetes. So I made 4 interfaces.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c">// A Controller is the interface to manage Kubernetes resources within a</span><span class="x">
</span><span class="c">// Kubernetes clusters.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Controller</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">Deleter</span><span class="x">
  </span><span class="n">Deployer</span><span class="x">
  </span><span class="n">Getter</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Deleter represents a Kubernetes delete operation.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Deleter</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">Delete</span><span class="p">(</span><span class="n">name</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Deployer represents a Kubernetes deploy operation.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Deployer</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">Deploy</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="x"> </span><span class="n">name</span><span class="x"> </span><span class="kt">string</span><span class="p">,</span><span class="x"> </span><span class="n">port</span><span class="x"> </span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Getter represents a Kubernetes get operation.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Getter</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">Get</span><span class="p">(</span><span class="n">name</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Manager models the Kubernetes required client settings to interact with a</span><span class="x">
</span><span class="c">// specific cluster. This Manager will implement our Controller interface.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Manager</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">clientSet</span><span class="x">       </span><span class="o">*</span><span class="n">kubernetes</span><span class="o">.</span><span class="n">Clientset</span><span class="x">
  </span><span class="n">namespace</span><span class="x">       </span><span class="kt">string</span><span class="x">
  </span><span class="n">imagePullSecret</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<h2 id="deployer">Deployer</h2>

<p>When deploying an application onto our Kubernetes cluster I decided to make it simple enough to just take an image’s name, a unique application’s name and what port the image needs to be exposed on.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c">// Modeling the deployment operation we need.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">deployOperation</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">image</span><span class="x">    </span><span class="kt">string</span><span class="x">
  </span><span class="n">name</span><span class="x">     </span><span class="kt">string</span><span class="x">
  </span><span class="n">port</span><span class="x">     </span><span class="kt">int</span><span class="x">
  </span><span class="n">replicas</span><span class="x"> </span><span class="kt">int</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Deploy will deploy a service and a deployment with a specific image, name and</span><span class="x">
</span><span class="c">// port specified for deployment.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Manager</span><span class="p">)</span><span class="x"> </span><span class="n">Deploy</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="x"> </span><span class="n">name</span><span class="x"> </span><span class="kt">string</span><span class="p">,</span><span class="x"> </span><span class="n">port</span><span class="x"> </span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">

  </span><span class="n">op</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">deployOperation</span><span class="p">{</span><span class="x">
    </span><span class="n">image</span><span class="o">:</span><span class="x"> </span><span class="n">image</span><span class="p">,</span><span class="x">
    </span><span class="n">name</span><span class="o">:</span><span class="x">  </span><span class="n">name</span><span class="p">,</span><span class="x">
    </span><span class="n">port</span><span class="o">:</span><span class="x">  </span><span class="n">port</span><span class="p">,</span><span class="x">
    </span><span class="n">replicas</span><span class="o">:</span><span class="x"> </span><span class="m">2</span><span class="p">,</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">doDeployment</span><span class="p">(</span><span class="n">op</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">err</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">doService</span><span class="p">(</span><span class="n">op</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="n">err</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Create/update the new Deployment within the namespace. The resources defined</span><span class="x">
</span><span class="c">// for the deployment are very minimal with CPU limited at 100m and CPU memory</span><span class="x">
</span><span class="c">// limited at 256Mi.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Manager</span><span class="p">)</span><span class="x"> </span><span class="n">doDeployment</span><span class="p">(</span><span class="n">op</span><span class="x"> </span><span class="o">*</span><span class="n">deployOperation</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">

  </span><span class="n">appName</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">op</span><span class="o">.</span><span class="n">name</span><span class="x">

  </span><span class="c">// Define the Deployments spec.</span><span class="x">
  </span><span class="n">deploySpec</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">v1beta1</span><span class="o">.</span><span class="n">Deployment</span><span class="p">{</span><span class="x">
    </span><span class="n">TypeMeta</span><span class="o">:</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">TypeMeta</span><span class="p">{</span><span class="x">
    </span><span class="n">Kind</span><span class="o">:</span><span class="x">       </span><span class="s">"Deployment"</span><span class="p">,</span><span class="x">
      </span><span class="n">APIVersion</span><span class="o">:</span><span class="x"> </span><span class="s">"extensions/v1beta1"</span><span class="p">,</span><span class="x">
    </span><span class="p">},</span><span class="x">
    </span><span class="n">ObjectMeta</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="p">{</span><span class="x">
      </span><span class="n">Name</span><span class="o">:</span><span class="x"> </span><span class="n">appName</span><span class="p">,</span><span class="x">
    </span><span class="p">},</span><span class="x">
    </span><span class="n">Spec</span><span class="o">:</span><span class="x"> </span><span class="n">v1beta1</span><span class="o">.</span><span class="n">DeploymentSpec</span><span class="p">{</span><span class="x">
      </span><span class="n">Replicas</span><span class="o">:</span><span class="x"> </span><span class="n">int32p</span><span class="p">(</span><span class="n">op</span><span class="o">.</span><span class="n">replicas</span><span class="p">),</span><span class="x">
      </span><span class="n">Strategy</span><span class="o">:</span><span class="x"> </span><span class="n">v1beta1</span><span class="o">.</span><span class="n">DeploymentStrategy</span><span class="p">{</span><span class="x">
        </span><span class="n">Type</span><span class="o">:</span><span class="x"> </span><span class="n">v1beta1</span><span class="o">.</span><span class="n">RollingUpdateDeploymentStrategyType</span><span class="p">,</span><span class="x">
        </span><span class="n">RollingUpdate</span><span class="o">:</span><span class="x"> </span><span class="o">&amp;</span><span class="n">v1beta1</span><span class="o">.</span><span class="n">RollingUpdateDeployment</span><span class="p">{</span><span class="x">
          </span><span class="n">MaxUnavailable</span><span class="o">:</span><span class="x"> </span><span class="o">&amp;</span><span class="n">intstr</span><span class="o">.</span><span class="n">IntOrString</span><span class="p">{</span><span class="x">
            </span><span class="n">Type</span><span class="o">:</span><span class="x">   </span><span class="n">intstr</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span><span class="x">
            </span><span class="n">IntVal</span><span class="o">:</span><span class="x"> </span><span class="kt">int32</span><span class="p">(</span><span class="m">0</span><span class="p">),</span><span class="x">
          </span><span class="p">},</span><span class="x">
          </span><span class="n">MaxSurge</span><span class="o">:</span><span class="x"> </span><span class="o">&amp;</span><span class="n">intstr</span><span class="o">.</span><span class="n">IntOrString</span><span class="p">{</span><span class="x">
            </span><span class="n">Type</span><span class="o">:</span><span class="x">   </span><span class="n">intstr</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span><span class="x">
            </span><span class="n">IntVal</span><span class="o">:</span><span class="x"> </span><span class="kt">int32</span><span class="p">(</span><span class="m">1</span><span class="p">),</span><span class="x">
          </span><span class="p">},</span><span class="x">
        </span><span class="p">},</span><span class="x">
      </span><span class="p">},</span><span class="x">
      </span><span class="n">RevisionHistoryLimit</span><span class="o">:</span><span class="x"> </span><span class="n">int32p</span><span class="p">(</span><span class="m">10</span><span class="p">),</span><span class="x">
      </span><span class="n">Template</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">PodTemplateSpec</span><span class="p">{</span><span class="x">
        </span><span class="n">ObjectMeta</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="p">{</span><span class="x">
          </span><span class="n">Name</span><span class="o">:</span><span class="x">   </span><span class="n">appName</span><span class="p">,</span><span class="x">
          </span><span class="n">Labels</span><span class="o">:</span><span class="x"> </span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">"app"</span><span class="o">:</span><span class="x"> </span><span class="n">appName</span><span class="p">},</span><span class="x">
        </span><span class="p">},</span><span class="x">
        </span><span class="n">Spec</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">PodSpec</span><span class="p">{</span><span class="x">
          </span><span class="n">ImagePullSecrets</span><span class="o">:</span><span class="x"> </span><span class="p">[]</span><span class="n">v1</span><span class="o">.</span><span class="n">LocalObjectReference</span><span class="p">{</span><span class="x">
            </span><span class="p">{</span><span class="x">
              </span><span class="n">Name</span><span class="o">:</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">imagePullSecret</span><span class="p">,</span><span class="x">
            </span><span class="p">},</span><span class="x">
          </span><span class="p">},</span><span class="x">
          </span><span class="n">Containers</span><span class="o">:</span><span class="x"> </span><span class="p">[]</span><span class="n">v1</span><span class="o">.</span><span class="n">Container</span><span class="p">{</span><span class="x">
            </span><span class="n">v1</span><span class="o">.</span><span class="n">Container</span><span class="p">{</span><span class="x">
              </span><span class="n">Name</span><span class="o">:</span><span class="x">  </span><span class="n">op</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="x">
              </span><span class="n">Image</span><span class="o">:</span><span class="x"> </span><span class="n">op</span><span class="o">.</span><span class="n">image</span><span class="p">,</span><span class="x">
              </span><span class="n">Ports</span><span class="o">:</span><span class="x"> </span><span class="p">[]</span><span class="n">v1</span><span class="o">.</span><span class="n">ContainerPort</span><span class="p">{</span><span class="x">
                </span><span class="n">v1</span><span class="o">.</span><span class="n">ContainerPort</span><span class="p">{</span><span class="n">ContainerPort</span><span class="o">:</span><span class="x"> </span><span class="kt">int32</span><span class="p">(</span><span class="n">op</span><span class="o">.</span><span class="n">port</span><span class="p">),</span><span class="x"> </span><span class="n">Protocol</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">ProtocolTCP</span><span class="p">},</span><span class="x">
              </span><span class="p">},</span><span class="x">
              </span><span class="n">Resources</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">ResourceRequirements</span><span class="p">{</span><span class="x">
                </span><span class="n">Limits</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">ResourceList</span><span class="p">{</span><span class="x">
                  </span><span class="n">v1</span><span class="o">.</span><span class="n">ResourceCPU</span><span class="o">:</span><span class="x">    </span><span class="n">resource</span><span class="o">.</span><span class="n">MustParse</span><span class="p">(</span><span class="s">"100m"</span><span class="p">),</span><span class="x">
                  </span><span class="n">v1</span><span class="o">.</span><span class="n">ResourceMemory</span><span class="o">:</span><span class="x"> </span><span class="n">resource</span><span class="o">.</span><span class="n">MustParse</span><span class="p">(</span><span class="s">"256Mi"</span><span class="p">),</span><span class="x">
                </span><span class="p">},</span><span class="x">
              </span><span class="p">},</span><span class="x">
              </span><span class="n">ImagePullPolicy</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">PullIfNotPresent</span><span class="p">,</span><span class="x">
            </span><span class="p">},</span><span class="x">
          </span><span class="p">},</span><span class="x">
          </span><span class="n">RestartPolicy</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">RestartPolicyAlways</span><span class="p">,</span><span class="x">
          </span><span class="n">DNSPolicy</span><span class="o">:</span><span class="x">     </span><span class="n">v1</span><span class="o">.</span><span class="n">DNSClusterFirst</span><span class="p">,</span><span class="x">
        </span><span class="p">},</span><span class="x">
      </span><span class="p">},</span><span class="x">
    </span><span class="p">},</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="n">deploy</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">clientSet</span><span class="o">.</span><span class="n">Extensions</span><span class="p">()</span><span class="o">.</span><span class="n">Deployments</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">namespace</span><span class="p">)</span><span class="x">
  </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">deploy</span><span class="o">.</span><span class="n">Update</span><span class="p">(</span><span class="n">deploySpec</span><span class="p">)</span><span class="x">
  </span><span class="k">switch</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="no">nil</span><span class="o">:</span><span class="x">
    </span><span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"deployment controller updated"</span><span class="p">)</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="o">!</span><span class="n">errors</span><span class="o">.</span><span class="n">IsNotFound</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">:</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"could not update deployment controller: %s"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
  </span><span class="k">default</span><span class="o">:</span><span class="x">
    </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">deploy</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">deploySpec</span><span class="p">)</span><span class="x">
    </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
      </span><span class="k">return</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"could not create deployment controller: %s"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
    </span><span class="p">}</span><span class="x">
    </span><span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"deployment controller created"</span><span class="p">)</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Create/update the service within a namespace. It will be exposed on port 80,</span><span class="x">
</span><span class="c">// but will be using the target port of what was specified.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Manager</span><span class="p">)</span><span class="x"> </span><span class="n">doService</span><span class="p">(</span><span class="n">op</span><span class="x"> </span><span class="o">*</span><span class="n">deployOperation</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">

  </span><span class="n">appName</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">op</span><span class="o">.</span><span class="n">name</span><span class="x">

  </span><span class="c">// Define service spec.</span><span class="x">
  </span><span class="n">serviceSpec</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">v1</span><span class="o">.</span><span class="n">Service</span><span class="p">{</span><span class="x">
    </span><span class="n">TypeMeta</span><span class="o">:</span><span class="x"> </span><span class="n">unversioned</span><span class="o">.</span><span class="n">TypeMeta</span><span class="p">{</span><span class="x">
      </span><span class="n">Kind</span><span class="o">:</span><span class="x">       </span><span class="s">"Service"</span><span class="p">,</span><span class="x">
      </span><span class="n">APIVersion</span><span class="o">:</span><span class="x"> </span><span class="s">"v1"</span><span class="p">,</span><span class="x">
    </span><span class="p">},</span><span class="x">
    </span><span class="n">ObjectMeta</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="p">{</span><span class="x">
      </span><span class="n">Name</span><span class="o">:</span><span class="x"> </span><span class="n">appName</span><span class="p">,</span><span class="x">
    </span><span class="p">},</span><span class="x">
    </span><span class="n">Spec</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">ServiceSpec</span><span class="p">{</span><span class="x">
      </span><span class="n">Type</span><span class="o">:</span><span class="x">     </span><span class="n">v1</span><span class="o">.</span><span class="n">ServiceTypeClusterIP</span><span class="p">,</span><span class="x">
      </span><span class="n">Selector</span><span class="o">:</span><span class="x"> </span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">"app"</span><span class="o">:</span><span class="x"> </span><span class="n">appName</span><span class="p">},</span><span class="x">
      </span><span class="n">Ports</span><span class="o">:</span><span class="x"> </span><span class="p">[]</span><span class="n">v1</span><span class="o">.</span><span class="n">ServicePort</span><span class="p">{</span><span class="x">
        </span><span class="n">v1</span><span class="o">.</span><span class="n">ServicePort</span><span class="p">{</span><span class="x">
          </span><span class="n">Protocol</span><span class="o">:</span><span class="x"> </span><span class="n">v1</span><span class="o">.</span><span class="n">ProtocolTCP</span><span class="p">,</span><span class="x">
          </span><span class="n">Port</span><span class="o">:</span><span class="x">     </span><span class="m">80</span><span class="p">,</span><span class="x">
          </span><span class="n">TargetPort</span><span class="o">:</span><span class="x"> </span><span class="n">intstr</span><span class="o">.</span><span class="n">IntOrString</span><span class="p">{</span><span class="x">
            </span><span class="n">Type</span><span class="o">:</span><span class="x">   </span><span class="n">intstr</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span><span class="x">
            </span><span class="n">IntVal</span><span class="o">:</span><span class="x"> </span><span class="kt">int32</span><span class="p">(</span><span class="n">op</span><span class="o">.</span><span class="n">port</span><span class="p">),</span><span class="x">
          </span><span class="p">},</span><span class="x">
        </span><span class="p">},</span><span class="x">
      </span><span class="p">},</span><span class="x">
    </span><span class="p">},</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="n">service</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">clientSet</span><span class="o">.</span><span class="n">Core</span><span class="p">()</span><span class="o">.</span><span class="n">Services</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">namespace</span><span class="p">)</span><span class="x">
  </span><span class="n">svc</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">service</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">appName</span><span class="p">)</span><span class="x">
  </span><span class="k">switch</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="no">nil</span><span class="o">:</span><span class="x">
    </span><span class="n">serviceSpec</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="o">.</span><span class="n">ResourceVersion</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">svc</span><span class="o">.</span><span class="n">ObjectMeta</span><span class="o">.</span><span class="n">ResourceVersion</span><span class="x">
    </span><span class="n">serviceSpec</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">ClusterIP</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">svc</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">ClusterIP</span><span class="x">
    </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">service</span><span class="o">.</span><span class="n">Update</span><span class="p">(</span><span class="n">serviceSpec</span><span class="p">)</span><span class="x">
    </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
      </span><span class="k">return</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"failed to update service: %s"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
    </span><span class="p">}</span><span class="x">
    </span><span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"service updated"</span><span class="p">)</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="n">errors</span><span class="o">.</span><span class="n">IsNotFound</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">:</span><span class="x">
    </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">service</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">serviceSpec</span><span class="p">)</span><span class="x">
    </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
      </span><span class="k">return</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"failed to create service: %s"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
    </span><span class="p">}</span><span class="x">
    </span><span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"service created"</span><span class="p">)</span><span class="x">
  </span><span class="k">default</span><span class="o">:</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"unexpected error: %s"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Util function to return an int32 pointer (Kubernetes API specific functionality)</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">int32p</span><span class="p">(</span><span class="n">i</span><span class="x"> </span><span class="kt">int32</span><span class="p">)</span><span class="x"> </span><span class="o">*</span><span class="kt">int32</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">i</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<h2 id="deleter">Deleter</h2>

<p>The <code class="highlighter-rouge">Deleter</code> interface is super simple, just like an unqiue delete operation on any kind of system.</p>

<p><em>Note: there is one nuance that when deleting a deployment you must first scale down the replica set to 0 replicas. This issue is noted here in <a href="https://github.com/kubernetes/client-go/issues/50">Github</a>.</em></p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c">// Model of a delete operation. Must take the unique application name to select</span><span class="x">
</span><span class="c">// the correct application we created already in the cluster.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">deleteOperation</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">name</span><span class="x">       </span><span class="kt">string</span><span class="x">
  </span><span class="n">deleteOpts</span><span class="x"> </span><span class="o">*</span><span class="n">v1</span><span class="o">.</span><span class="n">DeleteOptions</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Delete will delete a service and a deployment with a unique name for the</span><span class="x">
</span><span class="c">// deployment and service.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Manager</span><span class="p">)</span><span class="x"> </span><span class="n">Delete</span><span class="p">(</span><span class="n">name</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">op</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">deleteOperation</span><span class="p">{</span><span class="x">
    </span><span class="n">name</span><span class="o">:</span><span class="x"> </span><span class="n">name</span><span class="p">,</span><span class="x">
    </span><span class="n">deleteOpts</span><span class="o">:</span><span class="x"> </span><span class="o">&amp;</span><span class="n">v1</span><span class="o">.</span><span class="n">DeleteOptions</span><span class="p">{</span><span class="x">
      </span><span class="n">GracePeriodSeconds</span><span class="o">:</span><span class="x"> </span><span class="n">int64p</span><span class="p">(</span><span class="m">0</span><span class="p">),</span><span class="x">
      </span><span class="n">OrphanDependents</span><span class="o">:</span><span class="x">   </span><span class="n">boolp</span><span class="p">(</span><span class="no">true</span><span class="p">),</span><span class="x">
    </span><span class="p">},</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">doDeleteDeployment</span><span class="p">(</span><span class="n">op</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">err</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">doDeleteService</span><span class="p">(</span><span class="n">op</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">err</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Delete a deployment within a namespace.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Manager</span><span class="p">)</span><span class="x"> </span><span class="n">doDeleteDeployment</span><span class="p">(</span><span class="n">op</span><span class="x"> </span><span class="o">*</span><span class="n">deleteOperation</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">

  </span><span class="n">appName</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">op</span><span class="o">.</span><span class="n">name</span><span class="x">

  </span><span class="n">deploy</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">clientSet</span><span class="o">.</span><span class="n">Extensions</span><span class="p">()</span><span class="o">.</span><span class="n">Deployments</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">namespace</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">appName</span><span class="p">)</span><span class="x">
  </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="c">// scale deployment to 0</span><span class="x">
    </span><span class="c">// issue: https://github.com/kubernetes/client-go/issues/50</span><span class="x">
    </span><span class="n">replicas</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">int32p</span><span class="p">(</span><span class="m">0</span><span class="p">)</span><span class="x">
    </span><span class="n">deploy</span><span class="o">.</span><span class="n">Spec</span><span class="o">.</span><span class="n">Replicas</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">replicas</span><span class="x">
    </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">_</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">clientSet</span><span class="o">.</span><span class="n">Extensions</span><span class="p">()</span><span class="o">.</span><span class="n">Deployments</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">namespace</span><span class="p">)</span><span class="o">.</span><span class="n">Update</span><span class="p">(</span><span class="n">deploy</span><span class="p">)</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="n">err</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">clientSet</span><span class="o">.</span><span class="n">Extensions</span><span class="p">()</span><span class="o">.</span><span class="n">Deployments</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">namespace</span><span class="p">)</span><span class="o">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">appName</span><span class="p">,</span><span class="x"> </span><span class="n">op</span><span class="o">.</span><span class="n">deleteOpts</span><span class="p">)</span><span class="x">
  </span><span class="k">switch</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="no">nil</span><span class="o">:</span><span class="x">
    </span><span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%s deployment deleted</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">appName</span><span class="p">)</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="o">!</span><span class="n">errors</span><span class="o">.</span><span class="n">IsNotFound</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">:</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"could not delete deployment controller: %s"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
  </span><span class="k">default</span><span class="o">:</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
  </span><span class="p">}</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Delete a service within a namespace.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Manager</span><span class="p">)</span><span class="x"> </span><span class="n">doDeleteService</span><span class="p">(</span><span class="n">op</span><span class="x"> </span><span class="o">*</span><span class="n">deleteOperation</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">

  </span><span class="n">appName</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">op</span><span class="o">.</span><span class="n">name</span><span class="x">

  </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">clientSet</span><span class="o">.</span><span class="n">Core</span><span class="p">()</span><span class="o">.</span><span class="n">Services</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">namespace</span><span class="p">)</span><span class="o">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">appName</span><span class="p">,</span><span class="x"> </span><span class="n">op</span><span class="o">.</span><span class="n">deleteOpts</span><span class="p">)</span><span class="x">
  </span><span class="k">switch</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="no">nil</span><span class="o">:</span><span class="x">
    </span><span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%s service deleted</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">appName</span><span class="p">)</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="o">!</span><span class="n">errors</span><span class="o">.</span><span class="n">IsNotFound</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">:</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"could not delete service: %s"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
  </span><span class="k">default</span><span class="o">:</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Util function to return an int64 pointer.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">int64p</span><span class="p">(</span><span class="n">i</span><span class="x"> </span><span class="kt">int64</span><span class="p">)</span><span class="x"> </span><span class="o">*</span><span class="kt">int64</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">i</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Util function to return a boolean pointer.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">boolp</span><span class="p">(</span><span class="n">b</span><span class="x"> </span><span class="kt">bool</span><span class="p">)</span><span class="x"> </span><span class="o">*</span><span class="kt">bool</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="o">&amp;</span><span class="n">b</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<h2 id="getter">Getter</h2>

<p>After we create and delete – we might want at least see what sort of applications we have deployed with our Manager. We can implement a basic <code class="highlighter-rouge">Get</code> method to select an application and see if it’s there in the cluster running. We can do a lot more with this kind of idea later, but for now I am just making sure the deployment is there.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c">// Model of a get deployment operation. The name is a unique identifier for an</span><span class="x">
</span><span class="c">// application.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">getOperation</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="n">name</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Get will get a deployment for a specific deployment/service pair. If it is not</span><span class="x">
</span><span class="c">// present then return with an error.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Manager</span><span class="p">)</span><span class="x"> </span><span class="n">Get</span><span class="p">(</span><span class="n">name</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">

  </span><span class="n">op</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">getOperation</span><span class="p">{</span><span class="x">
    </span><span class="n">name</span><span class="o">:</span><span class="x"> </span><span class="n">name</span><span class="p">,</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">doGetDeployment</span><span class="p">(</span><span class="n">op</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">err</span><span class="x">
  </span><span class="p">}</span><span class="x">

  </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// Get a deployment method.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="o">*</span><span class="n">Manager</span><span class="p">)</span><span class="x"> </span><span class="n">doGetDeployment</span><span class="p">(</span><span class="n">op</span><span class="x"> </span><span class="o">*</span><span class="n">getOperation</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">

  </span><span class="n">appName</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">op</span><span class="o">.</span><span class="n">name</span><span class="x">

  </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">m</span><span class="o">.</span><span class="n">clientSet</span><span class="o">.</span><span class="n">Extensions</span><span class="p">()</span><span class="o">.</span><span class="n">Deployments</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">namespace</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">appName</span><span class="p">)</span><span class="x">
  </span><span class="k">switch</span><span class="x"> </span><span class="p">{</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="no">nil</span><span class="o">:</span><span class="x">
    </span><span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%s deployment found</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="x"> </span><span class="n">appName</span><span class="p">)</span><span class="x">
  </span><span class="k">case</span><span class="x"> </span><span class="o">!</span><span class="n">errors</span><span class="o">.</span><span class="n">IsNotFound</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">:</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"could not get deployment controller: %s"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">)</span><span class="x">
  </span><span class="k">default</span><span class="o">:</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
  </span><span class="p">}</span><span class="x">
  </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<hr />

<p><img src="./../assets/images/super-happy.jpg" alt="super-happy" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>We should have a very basic Manager that implements the Controller interface we defined. This can be super robust later on, but for now we have a very simple to understand way to create, delete and retrieve information about our applications in a Kubernetes’ namespace.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Deep Dive: Go Interfaces Part I</title>
	  <link>//Deep-Dive-Go-Interfaces-Part-1</link>
	  <author>Jordan Taylor</author>
	  <pubDate>2017-05-07T05:00:00+00:00</pubDate>
	  <guid>//Deep-Dive-Go-Interfaces-Part-1</guid>
	  <description><![CDATA[
	     <h2 id="interfaces-basics">Interfaces Basics</h2>

<p>Go’s known for it’s concurrency model but I believe the biggest attraction to this language is it’s interfaces and the beautiful abstractions they can give us.</p>

<p>Interfaces are, at their core, ways to describe behaviors and group functions within APIs. You can think of them as generalizations about the behavior of concrete types within your Go programs. The biggest difference maker in the way Go describes interfaces is that you can create new interfaces that are satisfied by already existing types without changes the existing types. They are <em>“satisfied implicitly”</em>.</p>

<p>Interfaces are labeled as <em>abstract types</em>. The only things that we can conclude from interfaces are what they <em>can do</em> – we don’t know anything else about them other than their <em>behaviors</em> like we said earlier.</p>

<hr />

<h2 id="interface-types">Interface Types</h2>

<p>An interface type declares a set of methods that a concrete type (struct or other type) must satisfy to implement that interface. This gives us the contractual rules that we can set for our interface behaviors.</p>

<p>The best, and most widely used interface in the Go standard library is the <code class="highlighter-rouge">io.Writer</code> type. Here are some excerpts from the <strong>io</strong> package.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">package</span><span class="x"> </span><span class="n">io</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Reader</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Read</span><span class="p">(</span><span class="n">p</span><span class="x"> </span><span class="p">[]</span><span class="kt">byte</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">n</span><span class="x"> </span><span class="kt">int</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Writer</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Write</span><span class="p">(</span><span class="n">p</span><span class="x"> </span><span class="p">[]</span><span class="kt">byte</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">n</span><span class="x"> </span><span class="kt">int</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Closer</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Close</span><span class="p">()</span><span class="x"> </span><span class="kt">error</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<p>You can see we have three basic interfaces that define some behaviors we might want to satisfy when we are trying to manipulate bytes within our programs. They are well named and you can infer what sorts of things concrete types will do if they satisfy these interfaces.</p>

<p>A concrete type that implements the Reader interface better have a method of <code class="highlighter-rouge">Read</code> and it must take in an array of bytes and return an int with an error.</p>

<h3 id="embedding-interfaces">Embedding Interfaces</h3>

<p>Interfaces also give us the ability to embed other interfaces within each other similar to how we can do embedding within structs.</p>

<p>The <strong>io</strong> package is a great example of this as well.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">package</span><span class="x"> </span><span class="n">io</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">ReadWriter</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Reader</span><span class="x">
    </span><span class="n">Writer</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">ReadCloser</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Reader</span><span class="x">
    </span><span class="n">Closer</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">ReadWriteCloser</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Reader</span><span class="x">
    </span><span class="n">Writer</span><span class="x">
    </span><span class="n">Closer</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<p>Here we can do some more inferences that concrete types can satisfy – they are either going to be either reading and writing, reading and closing and so on. They <strong>must</strong> satisfy those underlying interfaces though. If something is an instance of the <code class="highlighter-rouge">ReadWriter</code> interface you better believe it satisfies the <code class="highlighter-rouge">Reader</code> <strong>and</strong> <code class="highlighter-rouge">Writer</code> interfaces.</p>

<p>With these concrete types implementing these interfaces their methods are polymorphic in nature. This can create much more cleaning interfaces without having to redefine behaviors. This also still keep our behaviors as granular as possible. We are building much more readable and usable APIs!</p>

<p>Another implication we see is that anything that satisfies the <code class="highlighter-rouge">ReadWriteCloser</code> interface also satisfies the <code class="highlighter-rouge">ReadWriter</code> and the <code class="highlighter-rouge">ReadCloser</code>. Because types that implement <code class="highlighter-rouge">ReadWriteCloser</code> satisfy all three interfaces they also satisfy the other two composite interfaces. In turn the other two do not satisfy the third <code class="highlighter-rouge">ReadWriteCloser</code> interface – every method must be satisfied to be defined as an instance of that interface (remember that!).</p>

<h2 id="re-grouping-our-behaviors">Re-Grouping Our Behaviors</h2>

<p>When designing and implementing our Go programs we have to think about minimal ways to describe things though. Interface pollution IS a thing – this is when we don’t need them and can just use concrete types instead. There are trade offs to using interfaces and I will go more into depth later on in this Deep Dive series.</p>

<p>In the full circle of it everyone has written bad code in their lifetime – it’s not about that though. We have to understand that we are writing code that is easy to use and simple to understand. This goes for our interfaces as well.</p>

<p><img src="./../assets/images/simplify.jpg" alt="simplify" /></p>

<p>We are going to have some interfaces describing some streaming service we are developing. We are going to have all kinds of media types and we decided on implementing some interfaces to describe their behaviors.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">type</span><span class="x"> </span><span class="n">Text</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Pages</span><span class="p">()</span><span class="x"> </span><span class="kt">int</span><span class="x">
    </span><span class="n">Words</span><span class="p">()</span><span class="x"> </span><span class="kt">int</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Audio</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Stream</span><span class="p">()</span><span class="x"> </span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">ReadCloser</span><span class="p">,</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x">
    </span><span class="n">DurationTime</span><span class="p">()</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x">
    </span><span class="n">FormatType</span><span class="p">()</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Video</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Stream</span><span class="p">()</span><span class="x"> </span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">ReadCloser</span><span class="p">,</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x">
    </span><span class="n">DurationTime</span><span class="p">()</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x">
    </span><span class="n">FormatType</span><span class="p">()</span><span class="x"> </span><span class="kt">string</span><span class="x">
    </span><span class="n">Resolution</span><span class="p">()</span><span class="x"> </span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="x"> </span><span class="n">y</span><span class="x"> </span><span class="kt">int</span><span class="p">)</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<p>If you notice there are some things that we might be able to group with common behaviors within those few basic interfaces. The great thing about changing these behaviors to use this new <code class="highlighter-rouge">Streamer</code> type is that it will not break the underlying concrete types that are implementing these methods on top of the Video and Audio interface types.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">type</span><span class="x"> </span><span class="n">Streamer</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">Stream</span><span class="p">()</span><span class="x"> </span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">ReadCloser</span><span class="p">,</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x">
    </span><span class="n">DurationTime</span><span class="p">()</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="x">
    </span><span class="n">FormatType</span><span class="p">()</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span><span class="x">

</span></code></pre>
</div>

<p><img src="./../assets/images/mind-blown.jpg" alt="mind-blown" /></p>

<hr />

<p>Like we said earlier there are trade-offs to learning and implementing interfaces. I would suggest to absolutely try and incorporate them into your programs but understand that there are times and places for them. Think simple and minimal with designs. Interfaces can create solid abstractions for our concrete types throughout our programs without breaking things underneath.</p>

<p>Later in this series I will breakdown the trade-offs of why interfaces could be beneficial to us or not. There are some factors to take into account that we need to understand about interfaces. What allocations are happening and what sort of things can hinder our programs down the line with too many or exported vs. non-exported interfaces.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Go: Testing Approaches</title>
	  <link>//Go-Testing-Approaches</link>
	  <author>Jordan Taylor</author>
	  <pubDate>2017-03-31T05:00:00+00:00</pubDate>
	  <guid>//Go-Testing-Approaches</guid>
	  <description><![CDATA[
	     <h2 id="software-testing-basics">Software Testing Basics</h2>

<p>Wikipedia says software testing is, <em>“an investigation conducted to provide stakeholders with information about the quality of the product or service under test. Software testing can also provide an objective, independent view of the software to allow the business to appreciate and understand the risks of software implementation.”</em> In layman’s terms, you can think of it as a solid foundation for why people should trust using your software. It also gives the developers a sense of what “should” work when it comes to the software working the way it’s meant to.</p>

<h3 id="testing--me">Testing + Me</h3>

<p>I’ve come from all sorts of different testing approaches during my short engineering life. I was first introduced to software testing in college. We were exposed to the test driven development style. I would recommend all software engineers to learn testing and the fundamentals of why testing is key to the success of the software we write. While working in industry I’ve done basic “by hand” testing – with no automated testing suites. Don’t be that person that says testing is enough when you just get out <code class="highlighter-rouge">curl</code> and hit your APIs!</p>

<p>On the opposite end of the spectrum – I’ve had full out exposure on setting up and managing a Jenkins build system on AWS for a team. On that we could run our test suites, run on multiple environments, all managed using Jenkins build agents. I’ve also used other CI/CD tools to do the same thing, basically they all do similar things.</p>

<p>I’ve developed and tested in many different languages (NodeJS, Python, Java, PHP, Racket, and others). The ease of use in some native testing frameworks are great for some languages but none have even come close to Go’s standard <a href="https://golang.org/pkg/testing/">testing</a> package. I cannot emphasize more on how happy I am to develop and <strong>TEST</strong> with Go. Testing is made so easy with Go – there should be no excuse why you can’t have a solid amount of tests for your packages or applications.</p>

<p><img src="./../assets/images/vader-unit-tests.jpg" alt="vader" /></p>

<h3 id="testing-things-in-go">Testing Things In Go</h3>

<p>Some of the tips I can give when writing tests in Go are use <code class="highlighter-rouge">slices</code> of <code class="highlighter-rouge">structs</code> to model your test cases. This keeps everything tidy and very easy to just write one loop to handle all the cases for a function. <em>Note</em> I’ve done this plenty before, but I see a lot of people trying to just do a crazy amount of <code class="highlighter-rouge">asserts</code> with new variables and <code class="highlighter-rouge">structs</code> made and honestly it’s just so time consuming and ugly.</p>

<p>Given this function we can show some example tests.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">func</span><span class="x"> </span><span class="n">stringer</span><span class="p">(</span><span class="n">in</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="kt">error</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">if</span><span class="x"> </span><span class="n">in</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="s">""</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="k">return</span><span class="x"> </span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"empty string"</span><span class="p">)</span><span class="x">
    </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="k">if</span><span class="x"> </span><span class="n">in</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="s">"hi"</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="k">return</span><span class="x"> </span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"bye"</span><span class="p">)</span><span class="x">
    </span><span class="p">}</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<p>The better way to test cases – you <code class="highlighter-rouge">name</code> your test case, <code class="highlighter-rouge">args</code> structures your inbound arguments, <code class="highlighter-rouge">want&lt;Anything&gt;</code> are the types you expect from those test cases. You can model your tests so easily with this approach! :)</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">type</span><span class="x"> </span><span class="n">args</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">in</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span><span class="x">
</span><span class="n">tests</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="p">[]</span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">name</span><span class="x">    </span><span class="kt">string</span><span class="x">
    </span><span class="n">args</span><span class="x">    </span><span class="n">args</span><span class="x">
    </span><span class="n">wantErr</span><span class="x"> </span><span class="kt">bool</span><span class="x">
    </span><span class="c">// more wants can be added here ...</span><span class="x">
</span><span class="p">}{</span><span class="x">
    </span><span class="p">{</span><span class="x">
        </span><span class="n">name</span><span class="o">:</span><span class="x"> </span><span class="s">"test not empty string"</span><span class="p">,</span><span class="x">
        </span><span class="n">args</span><span class="o">:</span><span class="x"> </span><span class="n">args</span><span class="p">{</span><span class="x">
            </span><span class="n">in</span><span class="o">:</span><span class="x"> </span><span class="s">"test string"</span><span class="p">,</span><span class="x">
        </span><span class="p">},</span><span class="x">
        </span><span class="n">wantErr</span><span class="o">:</span><span class="x"> </span><span class="no">false</span><span class="p">,</span><span class="x">
    </span><span class="p">},</span><span class="x">
    </span><span class="p">{</span><span class="x">
        </span><span class="n">name</span><span class="o">:</span><span class="x"> </span><span class="s">"test hi string"</span><span class="p">,</span><span class="x">
        </span><span class="n">args</span><span class="o">:</span><span class="x"> </span><span class="n">args</span><span class="p">{</span><span class="x">
            </span><span class="n">in</span><span class="o">:</span><span class="x"> </span><span class="s">"hi"</span><span class="p">,</span><span class="x">
        </span><span class="p">},</span><span class="x">
        </span><span class="n">wantErr</span><span class="o">:</span><span class="x"> </span><span class="no">true</span><span class="p">,</span><span class="x">
    </span><span class="p">},</span><span class="x">
    </span><span class="p">{</span><span class="x">
        </span><span class="n">name</span><span class="o">:</span><span class="x"> </span><span class="s">"test string transformation"</span><span class="p">,</span><span class="x">
        </span><span class="n">args</span><span class="o">:</span><span class="x"> </span><span class="n">args</span><span class="p">{</span><span class="x">
            </span><span class="n">in</span><span class="o">:</span><span class="x"> </span><span class="s">"test empty string"</span><span class="p">,</span><span class="x">
        </span><span class="p">},</span><span class="x">
        </span><span class="n">wantErr</span><span class="o">:</span><span class="x"> </span><span class="no">true</span><span class="p">,</span><span class="x">
    </span><span class="p">},</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<p>After you generate your test cases you can run through a <code class="highlighter-rouge">for</code> loop and do some simple checks. You can also add customizable test cases based on conditionals you expect to have in your functions.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">for</span><span class="x"> </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">tt</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">tests</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">t</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="n">tt</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">(</span><span class="n">t</span><span class="x"> </span><span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">stringer</span><span class="p">(</span><span class="n">tt</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">in</span><span class="p">);</span><span class="x"> </span><span class="p">(</span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="p">)</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="n">tt</span><span class="o">.</span><span class="n">wantErr</span><span class="x"> </span><span class="p">{</span><span class="x">
            </span><span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"stringer() error = %v, wantErr %v"</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="p">,</span><span class="x"> </span><span class="n">tt</span><span class="o">.</span><span class="n">wantErr</span><span class="p">)</span><span class="x">
        </span><span class="p">}</span><span class="x">
    </span><span class="p">})</span><span class="x">
</span><span class="p">}</span><span class="x">
</span></code></pre>
</div>

<h3 id="other-testing-advantages">Other Testing Advantages</h3>

<p>While I am sure there are arguments that you can do this same thing in other languages just as easy. I take it as a <em>“cherry on top”</em> – Go is already easy to use and extremely powerful.</p>

<h4 id="third-party-packages">Third Party Packages</h4>

<ul>
  <li>Notable packages:</li>
  <li><a href="https://github.com/stretchr/testify">testify</a></li>
  <li><a href="https://github.com/gavv/httpexpect">httpexpect</a></li>
  <li><a href="https://github.com/smartystreets/goconvey/">goconvey</a> – browser UI testing</li>
  <li><a href="https://github.com/golang/mock">gomock</a> – mocking framework</li>
  <li><a href="https://golang.org/pkg/net/http/httptest/">httptest</a> – Go’s native <code class="highlighter-rouge">httptest</code> package</li>
  <li>Awesome-go’s <a href="https://awesome-go.com/#testing">testing</a> section</li>
</ul>

<h4 id="editor-integrations">Editor Integrations</h4>

<p>There are some extremely powerful and robust editor tools surrounding the Go language. These all give the power to the users – doing auto linting, generation for test cases, auto building, etc.! I cannot be more thankful for all of the abstractions automatically for my development process.</p>

<p>Here are a few I use or hear good things about.</p>

<ul>
  <li><a href="https://github.com/Microsoft/vscode-go">vscode-go**</a></li>
  <li><a href="https://github.com/fatih/vim-go">vim-go**</a></li>
  <li><a href="https://github.com/DisposaBoy/GoSublime">GoSublime</a></li>
  <li>Awesome-go’s <a href="https://awesome-go.com/#editor-plugins">editor-plugins</a> section</li>
</ul>

<p>** ones I use regularly</p>

	  ]]></description>
	</item>


</channel>
</rss>
